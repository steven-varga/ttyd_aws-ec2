#!/usr/bin/env python2
import os,sys,subprocess,signal,socket,pwd,grp
import zmq,json
import random,time,argparse

class ttyd_enqueue :
    keep_going = True
    server = socket = None

    def del_user( self, uname ) :
        os.system("userdel --force --remove "  + uname)

    def add_user( self, uid_ ) :
        uid   = "%04d" % uid_
        uname = "h5cpp_" + uid
        os.system("useradd -G h5cpp --no-log-init -o -m -N --uid " + uid +" "+ uname )
        return uname,uid

    def add_grp( self, name ) :
        os.system("groupadd -f  " + name)

    def get_gid(self, name  ) :
        self.add_grp( name )
        gr = grp.getgrnam( name )
        return gr.gr_gid

    def __init__( self, server,port, timeout ) :
        #install SIGINT (CTRL-C) handler 
        signal.signal(signal.SIGINT, self.sigint_handler)
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.settimeout(timeout)
        self.server = (server,port)
        self.socket = s

    # ctrl-c handler
    def sigint_handler( self, sig, frame ) :
        self.keep_going = False
        self.shutdown()

    def connect(self, port_min, port_max ) :
        s = self.socket
        gid = str( self.get_gid('h5cpp'))
        username = userid = None
        while self.keep_going :
            port = random.randint(port_min,port_max)
            s.sendto(json.dumps( { 'cmd':'heartbeat', 'port': port }  ), self.server )
            try:
                frame, address = s.recvfrom(1024)
                msg = json.loads( frame )
                # create user: 'h5cpp_####' where #### = port_number 
                username,userid = self.add_user( port )
                env = {'HOME':'/home/' + username, 'SHELL':'/bin/bash', 'TERM':'xterm-256color', 'USER':username,
                'PATH':'/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/snap/bin'}
                res = subprocess.check_output(
                        ['ttyd','-u', userid, '-g', gid, '-o', '-p ' + str(port), '/bin/bash'],
                        env=env, # the environment has to be replaced
                        cwd="/home/" + username,          # set home directory
                        stderr=subprocess.STDOUT )        # output redirected
            except OSError as err:
                print 'OSError: ', err
                self.keep_going = False
            except IOError as err:
                print 'IOError: ', err
            finally : # cleanup shines or rains
                if username is not None:
                    self.del_user(username)

    def shutdown( self ) :
        self.socket.close()

if __name__ == '__main__' :
    parser = argparse.ArgumentParser(description='this client connects to server, the client must have h5cpp group defined')

    parser.add_argument('-p','--port',   default=5000,  help='udp port to connect')
    parser.add_argument('-s','--server', default='54.209.33.120',  help='server to connect')
    parser.add_argument('-t','--timeout', default=2.0,  help='socket timeout')
    parser.add_argument('--port-min', default=2000,  help='min random port ttyd listens at')
    parser.add_argument('--port-max', default=9999,  help='max random port ttyd listens at')

    args = parser.parse_args()
    cmd  = vars(args)
    ttyd = ttyd_enqueue(cmd['server'], cmd['port'], cmd['timeout'] )
    ttyd.connect(cmd['port_min'], cmd['port_max'] )

