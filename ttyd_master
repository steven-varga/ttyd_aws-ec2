#!/usr/bin/env python2
import os,sys,subprocess,signal,socket,pwd,grp
import json,random,time,argparse
#import boto3, botocore.session
import logging

from apscheduler.schedulers.background import BackgroundScheduler
from datetime import datetime,timedelta
#from botocore.exceptions import ClientError

SERVICE_NOT_AVIALABLE_PAGE = 'http://h5cpp.ca/md__home_steven_Documents_projects_h5cpp_docs_pages_not_available.html'


class ttyd_queue :
    keep_going = True
    socket = scheduler = job_aws = ec2 = link = None

    def aws_callback( self ):
        print 'hello...'

    def __init__( self, port, timeout, link  ) :
        s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        s.bind(('', port))
        self.socket = s
        #self.ec2 = boto3.client('ec2')
        self.link = link

    def listen( self ) :
        dct = dict()
        s = self.socket
        while self.keep_going :
            try :
                frame, address = s.recvfrom(1024)
                msg = json.loads( frame )
                if msg['cmd'] == 'heartbeat':
                    dct[address] = address[0] + ':' + str(msg['port'])
                    #logging.info('heartbeat %s', str(msg['port']))
                elif msg['cmd'] == 'gethref':
                    try :
                        ttyd_address,value = dct.popitem()
                        s.sendto(json.dumps( { 'cmd':'newuser' } ), ttyd_address )
                        s.sendto(json.dumps( { 'seq':msg['seq'],'href':value } ), address )
                    except KeyError as err:
                        #logging.info('KeyError %s',str(err) )
                        # ran out of aws-ec2 cores: instatiate more:
                        s.sendto(json.dumps( { 'seq':msg['seq'],'href':self.link } ), address )
            except IOError as err:
                logging.info('IOError %s',str(err) )
                self.keep_going = False

    def shutdown( self ) :
        self.socket.close()


if __name__ == '__main__' :
    parser = argparse.ArgumentParser( description=
    """
    TTYD  CONTROLLER
    layered on UDP with REQ-REP-ACK protocol tracks running number of instances, and be polled by python call
    ttyd_link. Consumed link must be connected to with html redirect so the resource is closed when connection 
    breaks

    """, formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument('-t','--timeout', default=2.0,  help='socket timeout')
    parser.add_argument('-p','--port', default=5000,  help='udp port listen at')
    parser.add_argument('-l','--link', default=SERVICE_NOT_AVIALABLE_PAGE,
            help='link to redirect if all ttyd services are busy')
    parser.add_argument('--logfile', default='./user_tracking.log',
            help='connection logs are recorded for user-tracking')

    cmd  = vars(parser.parse_args( ))
    logging.basicConfig(
        format='%(asctime)s %(message)s', filename=cmd['logfile'],level=logging.INFO)
    ttyd = ttyd_queue(cmd['port'], cmd['timeout'], cmd['link']  )

    #scheduler = BackgroundScheduler()
    #scheduler.add_job(ttyd.aws_callback, 'interval', seconds=cmd['aws_update'])
    #scheduler.start()


    try :
        ttyd.listen()
    except (KeyboardInterrupt, SystemExit) :
        ttyd.shutdown()

